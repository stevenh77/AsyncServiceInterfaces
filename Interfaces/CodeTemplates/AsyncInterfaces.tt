<#@ template language="C#" debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System.CodeDom.Compiler" #>
<#@ assembly name="System.Core" #> <#@ assembly name="System.ServiceModel" #> <#@ assembly name="System.ServiceModel.Web" #> 
<#@ include file="Endpoint.ttinclude" #><#@ include file="Facade.ttinclude" #><#@ include file="Format.ttinclude" #><#@ include file="HttpVerb.ttinclude" #><#@ include file="MetadataProvider.ttinclude" #><#@ include file="Request.ttinclude" #><#@ include file="T4Toolbox.tt" #>
<#
#>
/***************************************************************************************
**** GENERATED CODE:  Use t4toolbox & tangiblet4editor to update AsyncInterfaces.tt ****
****************************************************************************************/
using System;
using Newtonsoft.Json;

namespace WcfServiceDirectory
{
	public partial class Services
    {
		public Services()
		{ 
<#
	var facades = new MetadataProvider().GetFacades();

	foreach (Facade facade in facades) 
	{
#>
			this.<#=facade.Name.Substring(1)#> = new <#=facade.Name.Substring(1)#>(); 
<#
	} 
#>
		}

<# 
	foreach (Facade facade in facades)
	{    
#>
		public <#=facade.Name.Substring(1)#> <#=facade.Name.Substring(1)#> { get; set; }
<#
	}
#>
	}
<#  
	foreach (var facade in facades)
	{
#>    
	public class <#=facade.Name.Substring(1)#>
	{
		private IServiceExecutor serviceExecutor;
			
		public <#=facade.Name.Substring(1)#>()  { this.serviceExecutor = new ServiceExecutor(); }

<#
	foreach(Endpoint endpoint in facade.Endpoints)
	{
		var responseType = (endpoint.Response.Name=="Void") ? "Object" : endpoint.Response.FullName;
		var serviceMethod = (endpoint.HttpVerb==HttpVerb.GET) ? "Get" : "Put";
		var requestParameterInfoIfRequired = (endpoint.Request!=null) 
											? string.Format("{0} {1}, ", endpoint.Request.Type.FullName, endpoint.Request.Name)
											: string.Empty; 
		var jsonRequestIfRequired = (endpoint.Request!=null) 
									? string.Format("JsonConvert.SerializeObject({0}),", endpoint.Request.Name) 
									: string.Empty;
#>
		public void <#=endpoint.Name#>(<#=requestParameterInfoIfRequired#>Action<CallCompleteEventArgs<<#=responseType#>>> callback)
		{
			serviceExecutor.<#=serviceMethod#><<#=responseType#>>("<#=endpoint.UriTemplate#>", <#=jsonRequestIfRequired#> callback);
		}

<#
	}
#>
	}	
<#
}
#>
}