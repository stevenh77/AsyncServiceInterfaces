<#@ template language="C#" debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System.CodeDom.Compiler" #>
<#@ assembly name="System.Core" #> <#@ assembly name="System.ServiceModel" #> <#@ assembly name="System.ServiceModel.Web" #> 
<#@ include file="Endpoint.ttinclude" #><#@ include file="Facade.ttinclude" #><#@ include file="Format.ttinclude" #><#@ include file="HttpVerb.ttinclude" #><#@ include file="MetadataProvider.ttinclude" #><#@ include file="Request.ttinclude" #><#@ include file="T4Toolbox.tt" #>
<#
	try 
	{
		var facades = new MetadataProvider().GetFacades();
#>
/***********************
**** GENERATED CODE ****
************************/
using System;
using Newtonsoft.Json;

namespace WcfServiceDirectory
{
	public partial class Services
    {
		public Services()
		{ 
<#
		foreach (Facade facade in facades) 
		{
#>
			this.<#=facade.Name.Substring(1)#> = new <#=facade.Name.Substring(1)#>(); 
<#
		} 
#>
		}

<# 
		foreach (Facade facade in facades)
		{    
#>
		public <#=facade.Name.Substring(1)#> <#=facade.Name.Substring(1)#> { get; set; }
<#
		}
#>
	}
<#  
		foreach (var facade in facades)
		{
#>    
	public class <#=facade.Name.Substring(1)#>
	{
		private IServiceExecutor serviceExecutor;
			
		public <#=facade.Name.Substring(1)#>() 
		{
			this.serviceExecutor = new ServiceExecutor();
		}
        
		public <#=facade.Name.Substring(1)#>(IServiceExecutor serviceExecutor) 
		{ 
			this.serviceExecutor = serviceExecutor; 
		}

<#
			foreach(Endpoint endpoint in facade.Endpoints)
			{
				var responseType = (endpoint.Response.Name=="Void") ? "void" : endpoint.Response.FullName;

				if (endpoint.HttpVerb==HttpVerb.GET) 
				{
#>
		public void <#=endpoint.Name#>(<# if (responseType!="void") {#>Action<CallCompleteEventArgs<<#=endpoint.Response.FullName#>>> callback<#}#>)
		{
			serviceExecutor.Get("<#=endpoint.UriTemplate#>", typeof(<#=responseType#>)); 
		}

<#
				}
				else
				{
#>
		public void <#=endpoint.Name#>(<#=endpoint.Request.Type.FullName#> <#=endpoint.Request.Name#>, <# if (responseType!="void") {#>Action<CallCompleteEventArgs<<#=endpoint.Response.FullName#>>> callback<#}#>)
		{
			var jsonRequest = JsonConvert.SerializeObject(<#=endpoint.Request.Name#>);
			serviceExecutor.Post("<#=endpoint.UriTemplate#>", jsonRequest, typeof(<#=responseType#>)); 
		}

<#
			}
		}
#>
	}	
	
<#
	}
}
catch (Exception e) 
{
	var errors = new CompilerErrorCollection();
	var error = new CompilerError(this.Host.TemplateFile, 0, 0, "0", e.Message);
	errors.Add(error);
	this.Host.LogErrors(errors);
}
#>
}